<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <title>Constretto - Reference Manual ver. 1.0</title>
    <script type="text/javascript" src="js/sh_main.js"></script>
    <script type="text/javascript" src="js/sh_xml.js"></script>
    <script type="text/javascript" src="js/sh_java.js"></script>
    <script type="text/javascript" src="js/sh_properties.js"></script>
    <script type="text/javascript" src="js/jquery-1.2.6.js"></script>
    <script type="text/javascript" src="js/document-builder.js"></script>
    <link rel="stylesheet" href="css/constretto.css"/>
    <link rel="stylesheet" href="css/sh_ide-idea.css"/>
</head>

<body>

<h1>Reference Manual ver. 1.0</h1>

<div id="toc" class="toc"/>

<div class="section" id="introduction" title="Introduction">

    <p>
        Constretto is a Java framework providing a simple API for accessing configuration data from several different
        sources like property files, Ini files and JavaBeans. It allows each configuration element to optionally be
        tagged,
        in much
        the same way as we are familiar from the web, with tags that Constretto later uses to resolve which value to
        use.
    </p>

    <p>
        Constrettos main goal is to solve a common problem found in most enterprise Java applications :
    </p>
    <blockquote>"How can I deploy my application in several environments, without rebuilding it ?"</blockquote>

    <p>This reference manual describes in detail how Constretto can be configured and used in order to reach
        that goal.
    </p>

</div>


<div class="section" id="concepts" title="Concepts">

    When configuring, using or extending Constretto there are some central concepts and vocabulary that Constretto
    uses, and these will be covered in the following sub sections.


    <div class="subsection" id="configurationStore" title="Configuration Store">

        Configuration Store acts as Constrettos bridge between different sources of configuration. They are responsible
        for loading configuration and translating it to the internal Constretto data model. Constretto does not enforce
        any formal way of configuring the different stores, and you can create your own by simply impementing the
        ConfigurationStore interface.

        <p>
            As a part of the core implementation of Constretto there are 4 implementations
            available (Java property files, Ini files, Java Beans and System Properties), and how these are configured
            are covered in later sections.
        </p>

        <p>
            Constretto
        </p>
    </div>


    <div class="subsection" id="expressions" title="Expressions">
        When loading configuration from a Configuration Store, Constretto creates an internal tree repesentation of
        your configuration. When you later want to navigate this tree, you use a Constretto expression to locate a value
        or place a cursor on the current treenode. The syntax of the expressions is pretty simple, it uses a "."
        to sepearate nodes in the tree. The example below shows how this is parsed by Constretto using a Java property
        file.

        <div class="example">
            The following content in a property file:
            <pre>
                root.node=leaf1
                root.node.child1=leaf2
                root.node.chld2=leaf3
            </pre>

            Will create this configuration tree :
            <pre>
                .
                `-- root
                    `-- node
                        |-- child1
                        |   `-- leaf2
                        |-- child2
                        |   `-- leaf3
                        `-- leaf1
            </pre>
        </div>

    </div>


    <div class="subsection" id="tags" title="Tags">
        <p>
            In Constretto all configuration expressions may be tagged in much the same way as we see in web 2.0 tagging
            of content. These tag is later used to set up a full set of configuration for your application. Each
            expression may have multiple tags. When starting a Constretto enabled application, you spesify a list of
            tags that are valid for the given session, in Constretto is called configuration context, and all
            expressions that are not in that list will be discarded. If an expression has values in more than one of the
            tags allowed for the current session, the value of the expression found first in the allowed tags will be
            used.
        </p>
    </div>
    <div class="subsection" id="configurationContext" title="Configuration Context">
        <pre class="sh_sh">
            java -jar myapp.jar MyMain -DCONSTRETTO_TAGS=development,linux,mock
        </pre>

        <pre class="sh_sh">
            export CONSTRETTO_TAGS=development.linux,mock
            java -jar myapp.jar MyMain
        </pre>


    </div>
    <div class="subsection" id="variableReplacement" title="Variable Replacement"></div>
    <div class="subsection" id="propertyOverriding" title="Property Overriding"></div>
    <div class="subsection" id="configurationInjection" title="Configuration Injection"></div>
</div>

<div class="section" id="supportedConfigurationFormats" title="Supported Configuration Formats">
    <div class="subsection" id="iniFIles" title="Ini Files">
        <p class="example">Example ini file:</p>
        <pre class="sh_properties">
        [default]
            key1 = a value
            key2 = a value

        [some tag]
            key1 = other value
            key2 = other value
        </pre>
    </div>

    <div class="subsection" id="propertyFiles" title="Property Files">
        <p class="example">Example property file:</p>
        <pre class="sh_properties">
        key1 = a value
        key2 = a value

        @some tag.key1 = other value
        @some tag.key2 = other value
        </pre>
    </div>

    <div class="subsection" id="javaBeans" title="JavaBeans">

    </div>
</div>
<pre class="sh_java">
@Test
public void simpleLookupForExistingKeyUsingDefaultValue() {
    ConstrettoConfiguration config = prepareTests();
    assertEquals("key1-value", config.evaluateTo("key1", "default-key-value"));
}
</pre>
<div class="section" id="constrettoJavaAPI" title="Constretto Java API">
    <div class="subsection" id="configurationBuilder" title="Constretto Configuration Builder">

        <p class="example">Example builder:</p>


    </div>
    <div class="subsection" id="clientAPI" title="ConstrettoConfiguration Client API"></div>
</div>

<div class="section" id="springIntegration" title="Spring Integration">
    <div class="subsection" id="xmlNamespace" title="Constretto Namespace"></div>
    <div class="subsection" id="assemblyContext" title="Assembly Context"></div>
    <div class="subsection" id="propertyPlaceHolder" title="Property Placeholder Configurer"></div>
</div>


<div class="section" id="bestPractices" title="Best Practices"></div>

<script type="text/javascript">
    var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
    document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
    try {
        var pageTracker = _gat._getTracker("UA-9153896-1");
        pageTracker._trackPageview();
    } catch(err) {
    }
</script>
</body>
</html>